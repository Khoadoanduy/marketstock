// File: components/LoginForm.jsx
"use client";

import Link from "next/link";
import { useState } from "react";
import { signIn } from "next-auth/react";
import { useRouter } from "next/navigation";

export default function LoginForm() {
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [error, setError] = useState("");

  const router = useRouter();

  const handleSubmit = async (e) => {
    e.preventDefault();

    try {
      const res = await signIn("credentials", {
        email,
        password,
        redirect: false,
      });

      if (res.error) {
        setError("Invalid Credentials");
        return;
      }

      router.replace("dashboard");
    } catch (error) {
      console.log(error);
    }
  };

  return (
    <div className="grid place-items-center h-screen">
      <div className="shadow-lg p-5 rounded-lg border-t-4 border-green-400">
        <h1 className="text-xl font-bold my-4">Login</h1>

        <form onSubmit={handleSubmit} className="flex flex-col gap-3">
          <input
            onChange={(e) => setEmail(e.target.value)}
            type="text"
            placeholder="Email"
          />
          <input
            onChange={(e) => setPassword(e.target.value)}
            type="password"
            placeholder="Password"
          />
          <button className="bg-green-600 text-white font-bold cursor-pointer px-6 py-2">
            Login
          </button>
          {error && (
            <div className="bg-red-500 text-white w-fit text-sm py-1 px-3 rounded-md mt-2">
              {error}
            </div>
          )}

          <Link className="text-sm mt-3 text-right" href={"/register"}>
            Don't have an account? <span className="underline">Register</span>
          </Link>
        </form>
      </div>
    </div>
  );
}
// File: components/NavBar.jsx
'use client'
import React, { useRef } from 'react';
import { useRouter } from 'next/router';
import { HiOutlineMenuAlt4 } from 'react-icons/hi';
import { AiOutlineClose } from 'react-icons/ai';
import { FaFacebook, FaInstagram, FaPinterest, FaTwitter, FaYoutube } from 'react-icons/fa';
import "@/styles/NavBar.css";

function NavBar() {
    const navRef = useRef(null);
    const logoRef = useRef(null);
    const mobileMenuRef = useRef(null);
    const iconRef = useRef(null);
    const router = useRouter();

    const handleNav = () => {
        const nav = navRef.current;
        const logo = logoRef.current;
        const mobileMenu = mobileMenuRef.current;
        const icon = iconRef.current;

        if (nav.classList.contains('navbar-bg')) {
            nav.classList.remove('navbar-bg');
            logo.classList.remove('dark');
            mobileMenu.classList.remove('active');
            icon.classList.remove('close-icon');
        } else {
            nav.classList.add('navbar-bg');
            logo.classList.add('dark');
            mobileMenu.classList.add('active');
            icon.classList.add('close-icon');
        }
    };

    const showClick = () => {
        router.push('/loginForm');
    };

    return (
        <div>
            <div name='home' ref={navRef} className='navbar'>
                <div ref={logoRef} className='logo'>
                    <h2>Stock market</h2>
                </div>
                <ul className="nav-menu">
                    <li><Link href='/' legacyBehavior><a>Home</a></Link></li>
                    <li><Link href='/about' legacyBehavior><a>About</a></Link></li>
                </ul>
                <div className="login-wrapper">
                    <a className="login" onClick={showClick}>Login</a>
                </div>
                <div className="hamburger" onClick={handleNav}>
                    <HiOutlineMenuAlt4 ref={iconRef} className='icon' />
                </div>
                <div ref={mobileMenuRef} className='mobile-menu'>
                    <ul className="mobile-nav">
                        <li><Link href='/' legacyBehavior><a>Home</a></Link></li>
                        <li><Link href='/about' legacyBehavior><a>About</a></Link></li>
                    </ul>
                    <div className="mobile-menu-bottom">
                        <div className="social-icons">
                            <FaFacebook className='icon' />
                            <FaInstagram className='icon' />
                            <FaTwitter className='icon' />
                            <FaPinterest className='icon' />
                            <FaYoutube className='icon' />
                        </div>
                    </div>
                </div>
            </div>
            <hr className="line"></hr>
        </div>
    );
}

export default NavBar;

// File: components/RegisterForm.jsx
"use client";

import Link from "next/link";
import { useState } from "react";
import { useRouter } from "next/navigation";

export default function RegisterForm() {
  const [name, setName] = useState("");
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [error, setError] = useState("");

  const router = useRouter();

  const handleSubmit = async (e) => {
    e.preventDefault();

    if (!name || !email || !password) {
      setError("All fields are necessary.");
      return;
    }

    try {
      const resUserExists = await fetch("api/userExists", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ email }),
      });

      const { user } = await resUserExists.json();

      if (user) {
        setError("User already exists.");
        return;
      }

      const res = await fetch("api/register", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          name,
          email,
          password,
        }),
      });

      if (res.ok) {
        const form = e.target;
        form.reset();
        router.push("/");
      } else {
        console.log("User registration failed.");
      }
    } catch (error) {
      console.log("Error during registration: ", error);
    }
  };

  return (
    <div className="grid place-items-center h-screen">
      <div className="shadow-lg p-5 rounded-lg border-t-4 border-green-400">
        <h1 className="text-xl font-bold my-4">Register</h1>

        <form onSubmit={handleSubmit} className="flex flex-col gap-3">
          <input
            onChange={(e) => setName(e.target.value)}
            type="text"
            placeholder="Full Name"
          />
          <input
            onChange={(e) => setEmail(e.target.value)}
            type="text"
            placeholder="Email"
          />
          <input
            onChange={(e) => setPassword(e.target.value)}
            type="password"
            placeholder="Password"
          />
          <button className="bg-green-600 text-white font-bold cursor-pointer px-6 py-2">
            Register
          </button>

          {error && (
            <div className="bg-red-500 text-white w-fit text-sm py-1 px-3 rounded-md mt-2">
              {error}
            </div>
          )}

          <Link className="text-sm mt-3 text-right" href={"/login"}>
            Already have an account? <span className="underline">Login</span>
          </Link>
        </form>
      </div>
    </div>
  );
}
// File: components/UserInfo.jsx
"use client";

import { signOut } from "next-auth/react";
import { useSession } from "next-auth/react";

export default function UserInfo() {
  const { data: session } = useSession();

  return (
    <div className="grid place-items-center h-screen">
      <div className="shadow-lg p-8 bg-zince-300/10 flex flex-col gap-2 my-6">
        <div>
          Name: <span className="font-bold">{session?.user?.name}</span>
        </div>
        <div>
          Email: <span className="font-bold">{session?.user?.email}</span>
        </div>
        <button
          onClick={() => signOut()}
          className="bg-red-500 text-white font-bold px-6 py-2 mt-3"
        >
          Log Out
        </button>
      </div>
    </div>
  );
}
// File: app/Providers.js
"use client";

import { SessionProvider } from "next-auth/react";

export const AuthProvider = ({ children }) => {
  return <SessionProvider>{children}</SessionProvider>;
};
// File: app/api/auth/[...nextauth]/route.js
import { connectMongoDB } from "@/lib/mongodb";
import User from "@/models/user";
import NextAuth from "next-auth/next";
import CredentialsProvider from "next-auth/providers/credentials";
import bcrypt from "bcryptjs";

export const authOptions = {
  providers: [
    CredentialsProvider({
      name: "credentials",
      credentials: {},

      async authorize(credentials) {
        const { email, password } = credentials;

        try {
          await connectMongoDB();
          const user = await User.findOne({ email });

          if (!user) {
            return null;
          }

          const passwordsMatch = await bcrypt.compare(password, user.password);

          if (!passwordsMatch) {
            return null;
          }

          return user;
        } catch (error) {
          console.log("Error: ", error);
        }
      },
    }),
  ],
  session: {
    strategy: "jwt",
  },
  secret: process.env.NEXTAUTH_SECRET,
  pages: {
    signIn: "/",
  },
};

const handler = NextAuth(authOptions);

export { handler as GET, handler as POST };
// File: app/api/login/route.js
import { connectMongoDB } from "@/lib/mongodb";
import User from "@/models/user";
import { NextResponse } from "next/server";
import bcrypt from "bcryptjs";

export async function POST(req) {
  try {
    const { email, password } = await req.json();
    await connectMongoDB();
    
    const user = await User.findOne({ email });
    if (!user) {
      return NextResponse.json(
        { message: "Invalid email or password." },
        { status: 401 }
      );
    }
    
    const isPasswordValid = await bcrypt.compare(password, user.password);
    if (!isPasswordValid) {
      return NextResponse.json(
        { message: "Invalid email or password." },
        { status: 401 }
      );
    }

    return NextResponse.json({ message: "Login successful." }, { status: 200 });
  } catch (error) {
    return NextResponse.json(
      { message: "An error occurred while logging in the user." },
      { status: 500 }
    );
  }
}

// File: app/api/register/route.js
import { connectMongoDB } from "@/lib/mongodb";
import User from "@/models/user";
import { NextResponse } from "next/server";
import bcrypt from "bcryptjs";

export async function POST(req) {
  try {
    const { name, email, password } = await req.json();
    const hashedPassword = await bcrypt.hash(password, 10);
    await connectMongoDB();
    await User.create({ name, email, password: hashedPassword });

    return NextResponse.json({ message: "User registered." }, { status: 201 });
  } catch (error) {
    return NextResponse.json(
      { message: "An error occurred while registering the user." },
      { status: 500 }
    );
  }
}
// File: app/api/userExists/route.js
import { connectMongoDB } from "@/lib/mongodb";
import User from "@/models/user";
import { NextResponse } from "next/server";

export async function POST(req) {
  try {
    await connectMongoDB();
    const { email } = await req.json();
    const user = await User.findOne({ email }).select("_id");
    console.log("user: ", user);
    return NextResponse.json({ user });
  } catch (error) {
    console.log(error);
  }
}
// File: app/dashboard/page.jsx
import UserInfo from "@/components/UserInfo";

export default function Dashboard() {
  return <UserInfo />;
}
// File: app/globals.css
@tailwind base;
@tailwind components;
@tailwind utilities;

input {
  @apply w-[400px] border border-gray-200 py-2 px-6 bg-zinc-100/40;
}
// File: app/layout.tsx
import { AuthProvider } from "./Providers";
import "./globals.css";
import { Inter } from "next/font/google";

const inter = Inter({ subsets: ["latin"] });

export const metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <body className={inter.className}>
        <AuthProvider>{children}</AuthProvider>
      </body>
    </html>
  );
}
// File: app/page.tsx
import LoginForm from "@/components/LoginForm";
import { getServerSession } from "next-auth";
import { redirect } from "next/navigation";
import { authOptions } from "./api/auth/[...nextauth]/route";
import NavBar from "@/components/NavBar"

export default async function Home() {
  const session = await getServerSession(authOptions);

  if (session) redirect("/dashboard");

  return (
    <main>
      <NavBar></NavBar>
      <LoginForm />
    </main>
  );
}
// File: app/register/page.jsx
import RegisterForm from "@/components/RegisterForm";
import { getServerSession } from "next-auth";
import { redirect } from "next/navigation";
import { authOptions } from "../api/auth/[...nextauth]/route";

export default async function Register() {
  const session = await getServerSession(authOptions);

  if (session) redirect("/dashboard");

  return <RegisterForm />;
}
// File: styles/NavBar.css
@import url('https://fonts.googleapis.com/css2?family=Poppins:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap');
*{
  background-color: black;
  font-family: 'Poppins';
}

.navbar {
  width: 90%;
  height: 80px;
  display: flex;
  align-items: center;
  padding: 0 1rem;
  z-index: 2;
  position: relative;
  
  color: white;
  background-color: black;
}

/* #ccc */

.navbar-bg {
  background-color: black;
  color: white;
}

.nav-menu {
  display: flex;
  list-style-type: none;
  
}
.nav-menu a{
  color: white;
  text-decoration: none;
}

.nav-menu li {
  padding: 0 1rem;
  
}
.nav-menu li,
.mobile-nav li {
  cursor: pointer;
  list-style-type: none;
  
  /* Add more styles here if necessary */
}
.nav-menu li :hover{
  cursor: pointer;
  list-style-type: none;
  /* Add more styles here if necessary */
}

.hamburger {
  display: none;
  margin-left: 20px;
  
  /* padding: 1rem; */
}

.mobile-menu {
  display: none;
}

.icon {
  font-size: 1.5rem;
  cursor: pointer;
}

.line{
  align-items: center;
  margin: 0;
  position: relative;
  width: 100%;
  height: 1.5px; /* Adjust as needed */
  background-color: #ccc; /* Adjust as needed */
}

.login-wrapper{
  margin-left: auto; /* Pushes the login link to the right */
  display: flex; /* Ensure flex behavior */
  align-items: left;
  /* margin-right: 20px; */
  
}
.login-wrapper a {
  text-decoration: none; /* Removes underline from the login link */
  border: 1px solid white; /* Adds a border around the login link */
  padding: 1px 20px; /* Adds padding to the login link */
  border-radius: 50px; /* Adds rounded corners to the border */
}

.login{
  color: white;
  border: 1px solid white;
  border-radius: 30px;
  font-size: 2rem;
  padding: 5px 10px 5px 10px;
}

.login-wrapper  a:hover{
  text-decoration: none; /* Removes underline from the login link */
  color: black;
  background: white;
  border: 1px solid black; /* Adds a border around the login link */
  padding: 1px 20px; /* Adds padding to the login link */
  border-radius: 50px; /* Adds rounded corners to the border */
}
@media screen and (max-width: 940px) {

  .mobile-menu {
      margin-left: 20px;
      display: flex;
      flex-direction: column;
      width: 100%;
      top: -100vh;
      left: 0;
      position: absolute;
      justify-content: space-between;
      
      transition: 0.3s;
      color: white;
  }

  .dark {
      color: white;
  }

  .active {
      top: 80px;
  }

  .mobile-menu li {
      padding: 1.2rem 1rem;
      margin: 0 1rem;
      border-bottom: 1px solid pink;
  }

  .mobile-nav {
      margin: 1rem 0;
  }

  .mobile-menu-bottom {
      width: 100%;
      text-align: center;
      padding: 1rem 0;
  }

  .social-icons {
      display: flex;
      justify-content: space-around;
      margin: 2rem 0;
  }

  .social-icons .icon:hover {
      transform: scale(1.5);
      transition: 0.3s;
  }

  .mobile-menu button {
      margin: 1rem;
      width: 90%;
  }


  .nav-menu {
      display: none;
  }

  .nav-icons {
      display: none;
  }
  .hamburger {
      display: block;
  }

}
/* Modal backdrop with a smoother transition */
.modal {
  display: none;
  position: fixed;
  z-index: 1000; /* Higher z-index for better overlay */
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
  overflow: auto;
  background-color: rgba(0, 0, 0, 0.6); /* Darker shade for better contrast */
  transition: opacity 0.3s ease; /* Smooth transition for modal display */
}

/* Visible state of the modal with a fade-in effect */
.modal.open {
  display: block;
  opacity: 1;
}

/* Modal content with shadow and animation */
.modal-content {
  background-color: #ffffff;
  margin: 10% auto; /* Adjusted margin for better positioning */
  padding: 25px;
  border-radius: 5px; /* Rounded corners */
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); /* Subtle shadow for depth */
  width: 90%;
  max-width: 450px; /* Slightly larger max-width */
  transform: translateY(-50px); /* Prepares the modal for slide-in effect */
  transition: transform 0.3s ease-out; /* Animation for slide-in effect */
}
.modal-content form{
  display: flex;
  flex-direction: column;
  background-color: white;
  
}
.modal-content form input{
  border: 1px solid black;
  border-radius: 10px;
  padding: 10px;
  margin-top: 10px;
  color:white;
}
.modal-content form button{
  margin-top: 10px;
  border: 1px solid black;
  border-radius: 10px;
  padding: 10px;
  color: white;
}
.modal-content form button:hover{
  margin-top: 10px;
  border-radius: 10px;
  padding: 10px;
  color: black;
  background-color: white;
}

/* Close button with improved visibility and interaction */
.close {
  background-color: white;
  position: absolute;
  top: 0;
  right: 0;
  padding: 0px;
  cursor: pointer;
  color: #888;
  float: right;
  font-size: 32px; /* Larger close icon for better interaction */
  font-weight: bold;
  transition: color 0.2s; /* Transition for hover effect */
}

/* Interactive states for close button */
.close:hover,
.close:focus {
  color: #f44336; /* Brighter color for close icon on hover/focus */
  text-decoration: none;
  cursor: pointer;
}

/* Additional styles for modal opening animation */
.modal.open .modal-content {
  transform: translateY(0); /* Slide-in effect to the natural position */
}

